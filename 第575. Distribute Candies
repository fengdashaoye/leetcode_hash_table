Given an integer array with even length, where different numbers in this array represent different kinds of candies. Each number means one candy of the corresponding kind. You need to distribute these candies equally in number to brother and sister. Return the maximum number of kinds of candies the sister could gain.

Example 1:
Input: candies = [1,1,2,2,3,3]
Output: 3
Explanation:
There are three different kinds of candies (1, 2 and 3), and two candies for each kind.
Optimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. 
The sister has three different kinds of candies. 
Example 2:
Input: candies = [1,1,2,3]
Output: 2
Explanation: For example, the sister has candies [2,3] and the brother has candies [1,1]. 
The sister has two different kinds of candies, the brother has only one kind of candies. 
Note:

The length of the given array is in range [2, 10,000], and will be even.
The number in given array is in range [-100,000, 100,000].
思路:其实这道题非常简单，因为其只需要返回姐姐的糖果种类，用hashmap存储各类糖果及其数量，如果糖果种类大于数组数量的一半，返回
数组数量的一半，如果小于，姐姐只能分到一半的糖果，其种类最大的数量就是hashmap的.size();

代码:
public class Solution {
    public int distributeCandies(int[] candies) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i < candies.length; i++){
            if(map.containsKey(candies[i])){
                map.put(candies[i], map.get(candies[i])+1);
            }else{
                map.put(candies[i], 1);
            }
        }
        return map.size() >= candies.length/2 ? candies.length/2 : map.size();
        
    }
}
经过我的改进，原先上面的做法为8.多%，赶紧后为80.多%，因为无需遍历完所有的糖果
代码:
public class Solution {
    public int distributeCandies(int[] candies) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        int length = candies.length/2;
        for(int i = 0; i < candies.length; i++){
            if(map.containsKey(candies[i])){
                map.put(candies[i], map.get(candies[i])+1);
            }else{
                map.put(candies[i], 1);
            }
            if(map.size() >= length){
                return length;
            }
        }
        return map.size();
       
        
    }
}
