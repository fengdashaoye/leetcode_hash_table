Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, 
replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay),
or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
这道题已看就知道是递归，解法其实很简单，return true的终止条件很简单，n==1时return true,但是什么时候return false。
原先我以为小于10且不等于1时return false。后来发现其实7也是happy number.
数字11有如下的计算过程：

1^2 + 1^2 = 2
2^2 = 4
4^2 = 16
1^2 + 6^2 = 37
3^2 + 7^2 = 58
5^2 + 8^2 = 89
8^2 + 9^2 = 145
1^2 + 4^2 + 5^2 = 42
4^2 + 2^2 = 20
2^2 + 0^2 = 4
4又重复出现了。因此利用hashset存储以往的数字，如果重复出现，则return false
代码:
public class Solution {
    HashSet<Integer> list = new HashSet<Integer>();
    public boolean isHappy(int n) {
        if(n == 1){
            return true;
        }
        if(list.contains(n)){
            return false;
        }
        list.add(n);
        int result = 0;
        while(n > 0){
            int middle = n % 10;
            result += (middle*middle);
            n = n / 10;
        }
        return isHappy(result);
    }
}
