You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. 
Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have "lakes" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.

Example:

[[0,1,0,0],
 [1,1,1,0],
 [0,1,0,0],
 [1,1,0,0]]
 思路:一开始的思路是如果某个值为1，如果其上下左右为null或者为0，周长就加1，但是这种方法是最慢的，非常非常非常慢。
 有一种非常巧妙的方法。
 代码:
 public class Solution {
    public int islandPerimeter(int[][] grid) {
        int result = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    if(j - 1 >= 0){
                        if(grid[i][j-1] == 0){
                            result++;
                        }
                    }else{
                        result++;
                    }
                    if(j + 1 < grid[0].length){
                        if(grid[i][j+1] == 0){
                            result++;
                        }
                    }else{
                        result++;
                    }
                    if(i-1 >= 0){
                        if(grid[i-1][j] == 0){
                            result++;
                        }
                    }else{
                        result++;
                    }
                    if(i + 1 < grid.length){
                        if(grid[i+1][j] == 0){
                            result++;
                        }
                    }else{
                        result++;
                    }
                    
                }
                
            }
        }
        return result;
        
    }
}

思路:
岛屿的个数*4-邻居的个数*2
是这样的岛屿的个数*4是岛屿所有边的长度，此时需要减去内部的，
+--+     +--+                   +--+--+
|  |  +  |  |          ->       |     |
+--+     +--+                   +--+--+
二维数组从视觉上是从坐上开始的，如果当找到一个岛屿时，如果其右边有邻居，则减2，如上图
如果下边有邻居，也减去2.无需考虑左边和上边，因为遍历从坐上开始，如果要开一个节点的左的和上的邻居，因为其左的和上的邻居都会比起先遍历，因此需要
减的边已经减去了。所以只需计算每一个岛屿的右边和下边的邻居。
代码:
public class Solution {
    public int islandPerimeter(int[][] grid) {
        int islands = 0, neighbours = 0;

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 1) {
                    islands++; // count islands
                    if (i < grid.length - 1 && grid[i + 1][j] == 1) neighbours++; // count down neighbours
                    if (j < grid[i].length - 1 && grid[i][j + 1] == 1) neighbours++; // count right neighbours
                }
            }
        }

        return islands * 4 - neighbours * 2;
    }
}


