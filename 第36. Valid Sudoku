Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.

The Sudoku board could be partially filled, where empty cells are filled with the character '.'.


A partially filled sudoku which is valid.
看是否是数独，
规则：依次检查每行，每列，每个子九宫格是否出现重复元素，如果出现返回false，否则返回true.
思路很简单，先看横，再看竖，再看每个子九宫格。
写一个函数判断子宫格内元素是否重复，然后在大的循环里不断遍历每个子宫格，小的那个函数参数为九宫格的左上起点。
在大循环中不断遍历这9个左上节点。
代码:
class Solution {
    public boolean isValidSudoku(char[][] board) {
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int length = board.length;
        boolean result = true;
        for(int i = 0; i < length; i++){//看横
            for(int j = 0; j < length; j++){
                if(board[i][j] != '.'){
                    if(map.containsKey(board[i][j])){
                        return false;
                    }else{
                        map.put(board[i][j], 1);
                    }
                }
            }
            map = new HashMap<Character, Integer>();
        }

        for(int i = 0; i < length; i++){//看竖
            map = new HashMap<Character, Integer>();
            for(int j= 0; j < length; j++){
                if(board[j][i] != '.'){
                    if(map.containsKey(board[j][i])){
                        return false;
                    }else{
                        map.put(board[j][i], 1);
                    }
                }
            }
        }
        
        map = new HashMap<Character, Integer>();
        
        for(int i = 0; i < length; i = i + 3){
            for(int j = 0; j < length; j = j + 3){
                int start_heng = i;
                int start_shu = j;
                result = panduan(board, start_heng, start_shu);
                if(result == false){
                    return result;
                }
            }
        }
        return true;
        
    }
    public boolean panduan(char[][] nums, int start_heng, int start_shu){
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        for(int m = 0; m < 3; m++){
            for(int n = 0; n < 3; n++){
                char content = nums[start_heng+m][start_shu+n];
                if(content != '.'){
                    if(map.containsKey(content)){
                        return false;
                    }else{
                        map.put(content, 1);
                    }
                }
            }
        }
        return true;
        
    }
}

