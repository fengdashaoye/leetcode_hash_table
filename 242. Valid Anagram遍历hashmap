Given two strings s and t, write a function to determine if t is an anagram of s.

For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.
思路:第一个字符串的各个字符存入hashmap,对应其个数，然后遍历第二个字符串的字符，如果不存在hashmap则return false
如果存在则把改个数减1，如果其个数小于0，也返回false.还有别的做法，利用小写字母26位这个特性
代码:
public class Solution {
    public boolean isAnagram(String s, String t) {
        if(s == "" && t == ""){
            return true;
        }
        if(s.length() != t.length()){
            return false;
        }
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        for(int i = 0; i < s.length(); i++){
            if(map.containsKey(s.charAt(i))){
                map.put(s.charAt(i), map.get(s.charAt(i))+1);
            }else{
                map.put(s.charAt(i), 1);
            }
        }
        for(int i = 0; i < t.length(); i++){
            if(map.containsKey(t.charAt(i))){
                map.put(t.charAt(i), map.get(t.charAt(i))-1);
                if(map.get(t.charAt(i)) < 0){
                    return false;
                }
            }else{
                return false;
            }
            
        }
        
        return true;
        
    }
}
第二种做法:
利用字母26位这个特性，做法要快一些，因为不用每次都要有.containsKey操作和put操作，嗯，很厉害。
public class Solution {
    public boolean isAnagram(String s, String t) {
        int[] alphabet = new int[26];
        for (int i = 0; i < s.length(); i++) alphabet[s.charAt(i) - 'a']++;
        for (int i = 0; i < t.length(); i++) alphabet[t.charAt(i) - 'a']--;
        for (int i : alphabet) if (i != 0) return false;
        return true;
    }
}

