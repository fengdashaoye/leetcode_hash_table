We define a harmonious array is an array where the difference between its maximum value and its minimum value is exactly 1.

Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible subsequences.

Example 1:
Input: [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].
Note: The length of the input array will not exceed 20,000.

思路:其实挺简单的，查看一下个数，以及如果存在比其大1或者小1的，也查看一下个数，相加与result比较即可。 将hashmap排序有一种方法，仅是排序方法
，不是本题方法
代码：
import java.util.ArrayList;  
import java.util.Arrays;  
import java.util.Collections;  
import java.util.Comparator;  
import java.util.HashMap;  
import java.util.List;  
import java.util.Map;  
import java.util.Map.Entry;
import java.lang.*;

public class Solution {
    public int findLHS(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i], map.get(nums[i])+1);
            }else{
                map.put(nums[i], 1);
            }
        }
        int result = 0;
        for(Entry<Integer, Integer> entry : map.entrySet()){
            int middle = entry.getValue();
            int middle_key = entry.getKey();
            if(map.containsKey(middle_key-1)){
                if(middle + map.get(middle_key-1) > result){
                    result = middle + map.get(middle_key-1);
                }
            }
            if(map.containsKey(middle_key+1)){
                if(middle + map.get(middle_key+1) > result){
                    result = middle + map.get(middle_key+1);
                }
            }
        }
        return result;
        
    }
}
这是本题的别人的方法:
public int findLHS(int[] nums) {
    Map<Long, Integer> map = new HashMap<>();
    for (long num : nums) {
        map.put(num, map.getOrDefault(num, 0) + 1);
    }
    int result = 0;
    for (long key : map.keySet()) {
        if (map.containsKey(key + 1)) {
            result = Math.max(result, map.get(key + 1) + map.get(key));
        }
    }
    return result;
}
You don't need to check both key+1 and key-1. Checking one of them is enough.
因为总会遍历到。

hashmap排序方法
import java.util.ArrayList;  
import java.util.Arrays;  
import java.util.Collections;  
import java.util.Comparator;  
import java.util.HashMap;  
import java.util.List;  
import java.util.Map;  
import java.util.Map.Entry;  
  
  
        Map<String, Long> map = new HashMap<String, Long>();  
        map.put("c", 33333L);  
        map.put("a", 11111L);  
        map.put("d", 44444L);  
        map.put("e", 55555L);  
        map.put("b", 22222L);  
          
        //将map.entrySet()转换成list  
        List<Map.Entry<String, Long>> list = new ArrayList<Map.Entry<String, Long>>(map.entrySet());  
        Collections.sort(list, new Comparator<Map.Entry<String, Long>>() {  
            //降序排序  
            @Override  
            public int compare(Entry<String, Long> o1, Entry<String, Long> o2) {  
                //return o1.getValue().compareTo(o2.getValue());  
                return o2.getValue().compareTo(o1.getValue());  
            }  
        });  
  
        for (Map.Entry<String, Long> mapping : list) {  
            System.out.println(mapping.getKey() + ":" + mapping.getValue());  
        }  
(2)
以Value进行排序
先声明一个HashMap对象：
Map<String, Integer> map = new HashMap<String, Integer>();
然后我们可以将Map集合转换成List集合中，而List使用ArrayList来实现如下：

List<Entry<String,Integer>> list =
    new ArrayList<Entry<String,Integer>>(map.entrySet());
最后通过Collections.sort(List l, Comparator c)方法来进行排序，代码如下：

Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
    public int compare(Map.Entry<String, Integer> o1,
            Map.Entry<String, Integer> o2) {
        return (o2.getValue() - o1.getValue());
    }
});
上述代码是讲map中的value按照逆序排序，如果需要按照升序进行排序的话，只需要修改o2.getValue() - o1.getValue()为o1.getValue() - o2.getValue()即可
